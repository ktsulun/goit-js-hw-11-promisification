{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","setTimeout","logg","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","logger","table","makeTransaction","transaction","min","max","Math","floor","random","reject","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":"kGAEA,MAAMA,EAAQC,GACL,IAAIC,QAAQC,IAChBC,WAAW,IAAMD,EAAQF,GAAKA,KAI5BI,EAAOC,GAAQC,QAAQC,IAAK,kBAAiBF,OAGnDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GCXlB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAAUC,EAAUC,GACxC,MAAMC,EAAeF,EAASG,IAAIC,GAClCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAG5D,OAAOhB,QAAQC,QAAQa,IAGtBG,EAASH,GAAgBT,QAAQa,MAAMJ,GAE7CH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GClBnC,MAIME,EAAmBC,IACrB,MAAMtB,GALyBuB,EAKS,IALJC,EAKS,IAJxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAOpC,OAAO,IAAItB,QAAQ,CAACC,EAASyB,KAC7B,MAAMC,EAAaJ,KAAKE,SAAW,GAEnCvB,WAAW,KACLyB,GACF1B,EAAQ,CAAC2B,GAAIR,EAAYQ,GAAIxB,KAAMN,IAErC4B,EAAON,EAAYQ,KAClB9B,MAID+B,EAAa,EAAED,KAAIxB,WACvBC,QAAQC,IAAK,eAAcsB,kBAAmBxB,QAG1C0B,EAAWF,IACfvB,QAAQ0B,KAAM,gCAA+BH,+BAG/CT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,K","file":"main.9891d3c873a3d476396c.js","sourcesContent":["\nexport { delay, logg };\nconst delay = ms => {\n  return new Promise(resolve => {\n     setTimeout(() => resolve(ms), ms);\n   });\n };\n \n const logg = time => console.log(`Resolved after ${time}ms`);\n \n // Вызовы функции для проверки\n delay(2000).then(logg); // Resolved after 2000ms\n delay(1000).then(logg); // Resolved after 1000ms\n delay(1500).then(logg); // Resolved after 1500ms","export { users, toggleUserState, logger };\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = function (allUsers, userName) {\n    const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    \n     return Promise.resolve(updatedUsers);\n}\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","export { randomIntegerFromInterval, makeTransaction, logSuccess, logError };\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return new Promise((resolve, reject) => {\n    const canProcess = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (canProcess) {\n        resolve({id: transaction.id, time: delay});\n      }\n      reject(transaction.id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);"],"sourceRoot":""}